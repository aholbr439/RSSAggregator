import components.simplereader.SimpleReader;
import components.simplereader.SimpleReader1L;
import components.simplewriter.SimpleWriter;
import components.simplewriter.SimpleWriter1L;
import components.xmltree.XMLTree;
import components.xmltree.XMLTree1;

/**
 * Program to convert an XML RSS (version 2.0) feed from a given URL into the
 * corresponding HTML output file.
 *
 * @author Put your name here
 *
 */
public final class RSSAggregator {

    /**
     * Private constructor so this utility class cannot be instantiated.
     */
    private RSSAggregator() {
    }

    /**
     * Outputs the "opening" tags in the generated HTML file. These are the
     * expected elements generated by this method:
     *
     * <html> <head> <title>the channel tag title as the page title</title>
     * </head> <body>
     * <h1>the page title inside a link to the <channel> link</h1>
     * <p>
     * the channel description
     * </p>
     * <table border="1">
     * <tr>
     * <th>Date</th>
     * <th>Source</th>
     * <th>News</th>
     * </tr>
     *
     * @param channel
     *            the channel element XMLTree
     * @param out
     *            the output stream
     * @updates out.content
     * @requires [the root of channel is a <channel> tag] and out.is_open
     * @ensures out.content = #out.content * [the HTML "opening" tags]
     */
    private static void outputHeader(XMLTree channel, SimpleWriter out) {
        assert channel != null : "Violation of: channel is not null";
        assert out != null : "Violation of: out is not null";
        assert channel.isTag() && channel.label().equals("channel") : ""
                + "Violation of: the label root of channel is a <channel> tag";
        assert out.isOpen() : "Violation of: out.is_open";

        //title
        String title = "Empty Title";
        int titleIndex = getChildElement(channel, "title");
        if (channel.child(titleIndex).numberOfChildren() > 0) {
            title = channel.child(titleIndex).child(0).label();
        }

        //link
        int linkIndex = getChildElement(channel, "link");
        String link = channel.child(linkIndex).child(0).label();

        //description
        String description = "Empty description";
        int descriptionIndex = getChildElement(channel, "description");
        if (channel.child(descriptionIndex).numberOfChildren() > 0) {
            description = channel.child(descriptionIndex).child(0).label();
        }

        out.println("<html>");
        out.println("<head>");
        out.println("<title>" + title + "</title>");
        out.println("</head>");
        out.println("<body>");
        out.println("<h1>" + "<a href=\"" + link + "\">" + title + "</a>"
                + "</h1>");
        out.println("<p>" + description + "</p>");
        out.println("<table border = \"1\">");
        out.println("<tr>");
        out.println("<th>" + "Date" + "</th>");
        out.println("<th>" + "News" + "</th>");
        out.println("<th>" + "Source" + "</th>");
        out.println("</tr>");

    }

    /**
     * Outputs the "closing" tags in the generated HTML file. These are the
     * expected elements generated by this method:
     *
     * </table>
     * </body> </html>
     *
     * @param out
     *            the output stream
     * @updates out.contents
     * @requires out.is_open
     * @ensures out.content = #out.content * [the HTML "closing" tags]
     */
    private static void outputFooter(SimpleWriter out) {
        assert out != null : "Violation of: out is not null";
        assert out.isOpen() : "Violation of: out.is_open";

        out.println("</table>");
        out.println("</body>");
        out.println("</html>");

    }

    /**
     * Finds the first occurrence of the given tag among the children of the
     * given {@code XMLTree} and return its index; returns -1 if not found.
     *
     * @param xml
     *            the {@code XMLTree} to search
     * @param tag
     *            the tag to look for
     * @return the index of the first child of type tag of the {@code XMLTree}
     *         or -1 if not found
     * @requires [the label of the root of xml is a tag]
     * @ensures <pre>
     * getChildElement =
     *  [the index of the first child of type tag of the {@code XMLTree} or
     *   -1 if not found]
     * </pre>
     */
    private static int getChildElement(XMLTree xml, String tag) {
        assert xml != null : "Violation of: xml is not null";
        assert tag != null : "Violation of: tag is not null";
        assert xml.isTag() : "Violation of: the label root of xml is a tag";
        int numChildren = xml.numberOfChildren();
        String root = xml.label();
        int i = 0;
        int index = -1;
        boolean flag = false;

        //check if tag
        //get label

        while (i < numChildren && !flag) {
            xml.child(i);
            if (xml.child(i).isTag()) {
                if (xml.child(i).label().equals(tag)) {
                    index = i;
                    flag = true;
                }
            }
            i++;
        }
        return index;
    }

    /**
     * Processes one news item and outputs one table row. The row contains three
     * elements: the publication date, the source, and the title (or
     * description) of the item.
     *
     * @param item
     *            the news item
     * @param out
     *            the output stream
     * @updates out.content
     * @requires [the label of the root of item is an <item> tag] and
     *           out.is_open
     * @ensures <pre>
     * out.content = #out.content *
     *   [an HTML table row with publication date, source, and title of news item]
     * </pre>
     */
    private static void processItem(XMLTree item, SimpleWriter out) {
        assert item != null : "Violation of: item is not null";
        assert out != null : "Violation of: out is not null";
        assert item.isTag() && item.label().equals("item") : ""
                + "Violation of: the label root of item is an <item> tag";
        assert out.isOpen() : "Violation of: out.is_open";

        int i = 0;

        //title
        String title = "Empty Title";
        int titleIndex = getChildElement(item, "title");
        if (titleIndex != -1 && item.child(titleIndex).isTag()) {
            if (titleIndex >= 0
                    && item.child(titleIndex).numberOfChildren() > 0) {
                title = item.child(titleIndex).child(0).label();
            } else {
                int descriptionIndex = getChildElement(item, "description");
                if (descriptionIndex >= 0 && item.child(descriptionIndex)
                        .numberOfChildren() > 0) {
                    title = item.child(descriptionIndex).child(0).label();
                } else {
                    title = "No title availiable";
                }
            }

        }

        //publication date
        String pub = "No date available";

        int pubIndex = getChildElement(item, "pubDate");
        if (pubIndex >= 0 && item.child(pubIndex).numberOfChildren() > 0) {
            pub = item.child(pubIndex).child(0).label();
        }

        //source
        String source = "No source available";
        int sourceIndex = getChildElement(item, "source");
        if (sourceIndex >= 0
                && item.child(sourceIndex).numberOfChildren() > 0) {
            source = item.child(sourceIndex).child(0).label();

        }

        //for source hyperlink
        String sourceUrl = " ";
        if (sourceIndex >= 0) {
            sourceUrl = "<a href=\""
                    + item.child(sourceIndex).attributeValue("url") + "\">";
        }

        //for title hyperlink
        int titleLinkIndex = getChildElement(item, "link");
        String titleLink = (" ");
        if (item.child(titleLinkIndex).isTag()) {
            if (titleLinkIndex >= 0
                    && item.child(titleLinkIndex).numberOfChildren() > 0) {
                titleLink = "<a href=\""
                        + item.child(titleLinkIndex).child(0).label() + "\">";
            }
        }

        out.println("<tr>");
        out.println("<th>" + pub + "</th>");
        out.println("<th>" + sourceUrl + source + "</th>");
        out.println("<th>" + titleLink + title + "</th>");
        out.println("</tr>");

    }

    /**
     * Processes one XML RSS (version 2.0) feed from a given URL converting it
     * into the corresponding HTML output file.
     *
     * @param url
     *            the URL of the RSS feed
     * @param file
     *            the name of the HTML output file
     * @param out
     *            the output stream to report progress or errors
     * @updates out.content
     * @requires out.is_open
     * @ensures <pre>
     * [reads RSS feed from url, saves HTML document with table of news items
     *   to file, appends to out.content any needed messages]
     * </pre>
     */
    //create each table
    private static void processFeed(String url, String file, SimpleWriter out) {
        XMLTree xml = new XMLTree1(url);
        XMLTree channel = xml.child(0);

        SimpleWriter out2 = new SimpleWriter1L(file);
        outputHeader(channel, out2);

        int i = 0;
        for (i = 0; i < channel.numberOfChildren(); i++) {
            if (channel.child(i).isTag()
                    && channel.child(i).label().equals("item")) {
                processItem(channel.child(i), out2);
            }
        }

        outputFooter(out2);

    }

    /**
     * Main method.
     *
     * @param args
     *            the command line arguments; unused here
     */
    public static void main(String[] args) {
        //creates top stories page
        SimpleReader in = new SimpleReader1L();
        SimpleWriter out = new SimpleWriter1L();

        String url = "";

        out.print("Enter the URL of an RSS 2.0 news feed: ");
        url = in.nextLine();
        XMLTree xml = new XMLTree1(url);
        out.print("Enter the name of an output file: ");
        String file = in.nextLine();
        //create html file that list the sample rss pages
        SimpleWriter out3 = new SimpleWriter1L(file);

        String feedUrl = "";
        String feedName = "";
        String feedFile = "";

        for (int i = 0; i < xml.numberOfChildren(); i++) {
            feedUrl = xml.child(i).attributeValue("url");
            feedName = xml.child(i).attributeValue("name");
            feedFile = xml.child(i).attributeValue("file");
            processFeed(feedUrl, feedFile, out3);
        }

        String title = xml.attributeValue("title");

        out3.println("<html>");
        out3.println("<head>");
        out3.println("<title>" + title + "</title>");
        out3.println("</head>");
        out3.println("<body>");
        out3.println("<h1>" + title + "</h1>");
        out3.println("<ul>");
        //make list
        for (int i = 0; i < xml.numberOfChildren(); i++) {
            String listFeedName = xml.child(i).attributeValue("name");
            String listFeedFile = xml.child(i).attributeValue("file");
            out3.println("<li>");
            out3.println("<a href=\"" + listFeedFile + "\">" + listFeedName
                    + "</a>");
            out3.println("</li>");
        }
        out3.println("</ul>");
        outputFooter(out3);

        in.close();
        out.close();
    }

}